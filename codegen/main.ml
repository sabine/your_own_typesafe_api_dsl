let create_dir_if_not_exists dir_path =
  if not (Sys.file_exists dir_path) then
    Unix.mkdir dir_path 0o755 (* rwxr-xr-x *)

let write_to_file path content =
  create_dir_if_not_exists
    (Fpath.of_string path |> Result.get_ok |> Fpath.parent |> Fpath.to_string);
  let oc = open_out path in
  Printf.fprintf oc "%s" content;
  close_out oc

let gen_typescript_bindings ~t ~it ~ot ~endpoints ~types_output_path
    ~endpoints_output_path =
  let Gen_endpoints.Gen_ts_bindings.{ types; code } =
    Gen_endpoints.Gen_ts_bindings.gen_routes ~type_namespace:"T." endpoints
  in
  let ts_types =
    Gen_endpoints.Gen_ts_bindings.gen_types ~type_namespace:"" ~t ~it ~ot
  in
  let types =
    Printf.sprintf
      "/* AUTOMATICALLY GENERATED BY codegen/main.ml */\n\n\
       import * as utils from \"./../utils\";\n\n\
       %s\n"
      (ts_types ^ "\n\n" ^ String.concat "\n\n" types)
  in
  write_to_file types_output_path types;

  let endpoints =
    Printf.sprintf
      "/* AUTOMATICALLY GENERATED BY codegen/main.ml */\n\
       import * as T from \"./types\";\n\
       import * as utils from \"../utils\";\n\n\
       %s"
      code
  in
  write_to_file endpoints_output_path endpoints

let gen_ocaml_endpoints ~t ~it ~ot ~endpoints ~types_output_path
    ~endpoints_output_path ~type_namespace ~handler_namespace =
  let ocaml_types =
    Gen_endpoints.Gen_ocaml_endpoints.gen_types ~type_namespace:"" ~t ~it ~ot
      endpoints
  in
  let ocaml_endpoints =
    Gen_endpoints.Gen_ocaml_endpoints.gen_routes ~type_namespace
      ~handler_namespace endpoints
  in

  let endpoints =
    Printf.sprintf "(* AUTOMATICALLY GENERATED BY codegen/main.ml *)\n\n%s"
      ocaml_endpoints
  in
  write_to_file endpoints_output_path endpoints;

  let types =
    Printf.sprintf
      "(* AUTOMATICALLY GENERATED BY codegen/main.ml *)\n\n\
       open Ppx_yojson_conv_lib.Yojson_conv\n\n\
       %s"
      ocaml_types
  in
  write_to_file types_output_path types

let gen_documentation ~t ~it ~ot ~endpoints ~output_path =
  let docs = Gen_endpoints.Gen_documentation.gen_docs ~t ~it ~ot endpoints in

  let oc = open_out output_path in
  Printf.fprintf oc "<!-- AUTOMATICALLY GENERATED BY codegen/main.ml -->\n\n%s"
    docs;
  close_out oc

let () =
  let open Api_spec.Types in
  let open Api_spec.Endpoints in
  (* backend endpoints *)
  gen_ocaml_endpoints ~t ~it ~ot ~endpoints
    ~types_output_path:"lib/api/generated_types.ml"
    ~endpoints_output_path:"lib/api/generated_endpoints.ml"
    ~type_namespace:"Generated_types." ~handler_namespace:"Handlers.Server.";

  gen_documentation ~t ~it ~ot ~endpoints
    ~output_path:"api_documentation/README.md";

  (* TypeScript sdk *)
  gen_typescript_bindings ~t ~it ~ot ~endpoints
    ~types_output_path:"bindings/TypeScript/src/generated/types.ts"
    ~endpoints_output_path:"bindings/TypeScript/src/generated/endpoints.ts"
