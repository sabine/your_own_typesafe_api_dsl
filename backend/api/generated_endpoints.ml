(* AUTOMATICALLY GENERATED BY codegen/main.ml *)

open Lwt.Syntax

let create_user (req: Dream.request) =
  let* body = Dream.body req in
  let body = Generated_types.CreateUserInput.t_of_yojson (Yojson.Safe.from_string body) in
  let* result : (Generated_types.CreateUserOutput.t, Dream.response Lwt.t) result = Handlers.Server.create_user req body in
  match result with
    | Ok result -> result |> Generated_types.CreateUserOutput.yojson_of_t |> Yojson.Safe.to_string |> Dream.json
    | Error response -> response

let users (req: Dream.request) =
  match Generated_types.UsersQuery.parse_query req with
  | Error msg -> Handlers.Server.bad_request msg
  | Ok query -> 

  let* result : (Generated_types.UsersOutput.t, Dream.response Lwt.t) result = Handlers.Server.users req query in
  match result with
    | Ok result -> result |> Generated_types.UsersOutput.yojson_of_t |> Yojson.Safe.to_string |> Dream.json
    | Error response -> response

let get_user (req: Dream.request) =
  let user_id = Dream.param req "user_id" in
  let* result : (Generated_types.GetUserOutput.t, Dream.response Lwt.t) result = Handlers.Server.get_user req user_id in
  match result with
    | Ok result -> result |> Generated_types.GetUserOutput.yojson_of_t |> Yojson.Safe.to_string |> Dream.json
    | Error response -> response

let delete_user (req: Dream.request) =
  let user_id = Dream.param req "user_id" in
  let* result : (Generated_types.DeleteUserOutput.t, Dream.response Lwt.t) result = Handlers.Server.delete_user req user_id in
  match result with
    | Ok result -> result |> Generated_types.DeleteUserOutput.yojson_of_t |> Yojson.Safe.to_string |> Dream.json
    | Error response -> response

let create_conversation (req: Dream.request) =
  match Generated_types.CreateConversationQuery.parse_query req with
  | Error msg -> Handlers.Server.bad_request msg
  | Ok query -> 

  let* body = Dream.body req in
  let body = Generated_types.CreateConversationInput.t_of_yojson (Yojson.Safe.from_string body) in
  let* result : (Generated_types.CreateConversationOutput.t, Dream.response Lwt.t) result = Handlers.Server.create_conversation req query body in
  match result with
    | Ok result -> result |> Generated_types.CreateConversationOutput.yojson_of_t |> Yojson.Safe.to_string |> Dream.json
    | Error response -> response

let update_conversation (req: Dream.request) =
  let conversation_id = Dream.param req "conversation_id" in
  let* body = Dream.body req in
  let body = Generated_types.UpdateConversationInput.t_of_yojson (Yojson.Safe.from_string body) in
  let* result : (Generated_types.UpdateConversationOutput.t, Dream.response Lwt.t) result = Handlers.Server.update_conversation req conversation_id body in
  match result with
    | Ok result -> result |> Generated_types.UpdateConversationOutput.yojson_of_t |> Yojson.Safe.to_string |> Dream.json
    | Error response -> response

let add_users_to_conversation (req: Dream.request) =
  let conversation_id = Dream.param req "conversation_id" in
  let* body = Dream.body req in
  let body = Generated_types.AddUsersToConversationInput.t_of_yojson (Yojson.Safe.from_string body) in
  let* result : (Generated_types.AddUsersToConversationOutput.t, Dream.response Lwt.t) result = Handlers.Server.add_users_to_conversation req conversation_id body in
  match result with
    | Ok result -> result |> Generated_types.AddUsersToConversationOutput.yojson_of_t |> Yojson.Safe.to_string |> Dream.json
    | Error response -> response

let remove_users_from_conversation (req: Dream.request) =
  let conversation_id = Dream.param req "conversation_id" in
  let* body = Dream.body req in
  let body = Generated_types.RemoveUsersFromConversationInput.t_of_yojson (Yojson.Safe.from_string body) in
  let* result : (Generated_types.RemoveUsersFromConversationOutput.t, Dream.response Lwt.t) result = Handlers.Server.remove_users_from_conversation req conversation_id body in
  match result with
    | Ok result -> result |> Generated_types.RemoveUsersFromConversationOutput.yojson_of_t |> Yojson.Safe.to_string |> Dream.json
    | Error response -> response

let routes = [
  Dream.post "/users" create_user;
  Dream.get "/users" users;
  Dream.get "/user/:user_id" get_user;
  Dream.delete "/user/:user_id" delete_user;
  Dream.post "/converations" create_conversation;
  Dream.post "/converation/:conversation_id" update_conversation;
  Dream.post "/converation/:conversation_id/add-users" add_users_to_conversation;
  Dream.post "/converation/:conversation_id/remove-users" remove_users_from_conversation
]