(* AUTOMATICALLY GENERATED BY codegen/main.ml *)

open Ppx_yojson_conv_lib.Yojson_conv

(* API input and output types *)
module UserId = struct
  type t = string [@@deriving yojson]

end

module ConversationId = struct
  type t = string [@@deriving yojson]

end

module LineId = struct
  type t = string [@@deriving yojson]

end

module DateTime = struct
  type t = string [@@deriving yojson]
end

module User = struct
  type user_member = {
  display_name: string;
  user_id: UserId.t
}  [@@deriving yojson] 

    type user_business = {
  display_name: string;
  user_id: UserId.t;
  vat_nr: string
}  [@@deriving yojson] 
type t =
    | UserMember of user_member 

    | UserBusiness of user_business 

  TODO: of_yojson
TODO: yojson_of
end

(* API input types *)


(* API output types *)
module PaginatedUsers = struct
  type t = {
    next: (UserId.t) option;
    prev: (UserId.t) option;
    objs: (User.t) list
} [@@deriving yojson]
end

module ParentLine = struct
  type t = {
    line_id: LineId.t;
    timestamp: DateTime.t;
    from: User.t;
    message: string;
    data: string
} [@@deriving yojson]
end

module Line = struct
  type t = {
    line_id: LineId.t;
    timestamp: DateTime.t;
    from: User.t;
    message: string;
    data: string;
    reply_to_line: (LineId.t) option
} [@@deriving yojson]
end

module Thread = struct
  type t = {
    line: Line.t;
    replies: (Line.t) list
} [@@deriving yojson]
end

module ConversationEvent = struct
  type conversation_event_new_line = {
  line: Line.t
}  [@@deriving yojson] 

    type conversation_event_join = {
  timestamp: DateTime.t;
  from: User.t
}  [@@deriving yojson] 

    type conversation_event_leave = {
  timestamp: DateTime.t;
  from: User.t
}  [@@deriving yojson] 

    type conversation_event_start_typing = {
  timestamp: DateTime.t;
  from: User.t
}  [@@deriving yojson] 

    type conversation_event_end_typing = {
  timestamp: DateTime.t;
  from: User.t
}  [@@deriving yojson] 
type t =
    | ConversationEventNewLine of conversation_event_new_line 

    | ConversationEventJoin of conversation_event_join 

    | ConversationEventLeave of conversation_event_leave 

    | ConversationEventStartTyping of conversation_event_start_typing 

    | ConversationEventEndTyping of conversation_event_end_typing 

  TODO: of_yojson
TODO: yojson_of
end

module Conversation = struct
  type t = {
    conversation_id: ConversationId.t;
    timestamp: DateTime.t;
    number_of_unread_messages: int;
    newest_line: (Line.t) option
} [@@deriving yojson]
end

module PaginatedConversations = struct
  type t = {
    next: (ConversationId.t) option;
    prev: (ConversationId.t) option;
    objs: (Conversation.t) list
} [@@deriving yojson]
end

(* endpoint types *)


module CreateUserInput = struct
  type t = {
    display_name: string;
    user_id: string
} [@@deriving of_yojson]
end

module CreateUserOutput = struct
  type t = {
    user_id: UserId.t
} [@@deriving yojson_of]
end

module UsersQuery = struct
  type t = {
    name: (string) option;
    next: (int) option;
    prev: (int) option;
    limit: (int) option
} [@@deriving query]
end

module UsersOutput = struct
  type t = {
    users: PaginatedUsers.t
} [@@deriving yojson_of]
end



module GetUserOutput = struct
  type t = {
    user: User.t
} [@@deriving yojson_of]
end

module DeleteUserOutput = struct
  type t = unit [@@deriving yojson_of]
end



module CreateConversationInput = struct
  type t = {
    user_ids: (UserId.t) list;
    data: string
} [@@deriving of_yojson]
end

module CreateConversationOutput = struct
  type t = {
    conversation_id: ConversationId.t
} [@@deriving yojson_of]
end



module UpdateConversationInput = struct
  type t = {
    data: string
} [@@deriving of_yojson]
end

module UpdateConversationOutput = struct
  type t = unit [@@deriving yojson_of]
end



module AddUsersToConversationInput = struct
  type t = {
    user_ids: (UserId.t) list
} [@@deriving of_yojson]
end

module AddUsersToConversationOutput = struct
  type t = unit [@@deriving yojson_of]
end



module RemoveUsersFromConversationInput = struct
  type t = {
    user_ids: (UserId.t) list
} [@@deriving of_yojson]
end

module RemoveUsersFromConversationOutput = struct
  type t = unit [@@deriving yojson_of]
end